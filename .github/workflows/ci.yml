name: BOARD CI

# Run this workflow every time a new commit pushed to your repository
on: push

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  board-ci:
    # Name the Job
    name: Board CI
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    # Set the environment for the job
    env:
      GO111MODULE: "off"
      mysql_version: "5.7.31"
      openldap_version: "1.1.11"
      registry: "quay.io/piranhahu"

    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14
      - run: export GOROOT=$(go env GOROOT)
      - run: curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.9.0/kind-linux-amd64 && chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
      - run: curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" && chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
      - run: python -V
      - run: echo "load docker images from quay.io instead of dockerhub(rate limit)."
      - run: docker pull ${registry}/kindest-node:v1.19.1 && docker tag ${registry}/kindest-node:v1.19.1 kindest/node:v1.19.1
      - run: docker pull ${registry}/openldap:1.1.11 && docker tag ${registry}/openldap:1.1.11 osixia/openldap:1.1.11
      - run: docker pull ${registry}/registry && docker tag ${registry}/registry registry
      - run: docker pull ${registry}/dev_gomail:dev && docker tag ${registry}/dev_gomail:dev openboard/dev_gomail:dev
      - run: docker pull ${registry}/golang:1.14.0 && docker tag ${registry}/golang:1.14.0 golang:1.14.0
      - run: docker pull ${registry}/mysql:5.7.31 && docker tag ${registry}/mysql:5.7.31 mysql:5.7.31
      - run: docker pull ${registry}/dev_uibuilder:7.4 && docker tag ${registry}/dev_uibuilder:7.4 openboard/dev_uibuilder:7.4
      - run: kind create cluster --config tests/kind-config.yaml --image=kindest/node:v1.19.1
      - run: kind get clusters
      - run: kubectl create -f tests/board-apiserver-clusterrolebinding.yaml
      - run: kubectl create ns library
      - run: sudo mkdir -p /etc/board/cert /data/board/cert
      - run: sudo docker cp kind-control-plane:/etc/kubernetes/pki/ca.crt /etc/board/cert/ca.pem
      - run: sudo docker cp kind-control-plane:/etc/kubernetes/pki/ca.key /etc/board/cert/ca-key.pem
      - run: export KUBE_MASTER_PORT=6443
      - run: export KUBE_MASTER_IP=$(docker inspect kind-control-plane  -f '{{.NetworkSettings.Networks.kind.IPAddress}}')
      - run: echo $KUBE_MASTER_IP
      - run: sed -i -e 's/KUBE_MASTER_IP=10.110.27.103/KUBE_MASTER_IP=${KUBE_MASTER_IP}/g' -e "s/KUBE_MASTER_PORT=51926/KUBE_MASTER_PORT=${KUBE_MASTER_PORT}/g" -e "s/NODE_IP=10.110.27.103/NODE_IP=kind-control-plane/g" tests/env.cfg
      - run: sed -i -e '/kube_http_scheme/c\kube_http_scheme=https' -e "/kube_master_ip/c\kube_master_ip=${KUBE_MASTER_IP}" -e "/kube_master_port/c\kube_master_port=${KUBE_MASTER_PORT}" make/board.cfg 
      - run: docker-compose -f tests/docker-compose.uibuilder.test.yml up
      - run: bash -c 'function uitest(){ code=$(docker inspect tests_uibuilder7.4_1 -f "{{.State.ExitCode}}"); return $code; }; uitest'
      - run: sudo make prepare
      - run: source tests/env.cfg
      - run: cp tests/docker-compose.test.yml make/dev
      - run: cp tests/ldap_test.ldif make/dev
      - run: docker-compose -f make/dev/docker-compose.test.yml up -d
      - run: sudo sh tests/hosts.gitlab.sh
      - run: sudo ln -s /data/board/cert /cert
      - run: source tests/run.sh
      - run: cd src/adminserver && go build -v -o adminserver